//
//  TMTMRecommendationFeedbackCollectionViewLayout.swift
//  consumer
//
//  Created by Gregory Sapienza on 3/24/17.
//  Copyright Â© 2017 Human Ventures Co. All rights reserved.
//

import UIKit

protocol TMRecommendationFeedbackCollectionViewLayoutProtocol {
    
    /// Asks the delegate for the size of the specified item.
    ///
    /// - Parameters:
    ///   - collectionView: The collection view object displaying the flow layout.
    ///   - collectionViewLayout: The layout object requesting the information.
    ///   - indexPath: The index path of the item.
    /// - Returns: The size of the item. The width and height values must both be greater than 0. Items must also not exceed the available space in the collection view.
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize
}

class TMRecommendationFeedbackCollectionViewLayout: UICollectionViewFlowLayout {
    
    // MARK: - Public iVars
    
    /// Delegate implementing sizing for cells.
    var delegate: TMRecommendationFeedbackCollectionViewLayoutProtocol?
    
    /// State of view controller using this layout.
    var state: TMRecommendationFeedbackViewControllerState
    
    // MARK: - Private iVars

    /// Layout cache for attributes generated by this layout. Cache is needed so that attributes do not have to be regenerated every time that the 'prepare' function is called.
    private var cache: [UICollectionViewLayoutAttributes]?
    
    /// Content width of collection view.
    private var contentWidth: CGFloat {
        if let collectionView = collectionView {
            return collectionView.bounds.width //Content width will not grow, so using the collection view width will be fine.
        } else {
            return 0
        }
    }
    
    /// Content height of the collection view.
    private var contentHeight: CGFloat = 0
    
    // MARK: - Public

    init(with state: TMRecommendationFeedbackViewControllerState) {
        self.state = state
        super.init()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func prepare() {
        if cache == nil {
            contentHeight = 0
            cache = []
            
            guard let collectionView = collectionView else {
                print("Collection View is nil")
                return
            }
            
            for section in 0 ..< collectionView.numberOfSections {
                for item in 0 ..< collectionView.numberOfItems(inSection: section) {
                    
                    let indexPath = IndexPath(item: item, section: section)
                    
                    let attributes = UICollectionViewLayoutAttributes(forCellWith: indexPath)
                    
                    var origin = CGPoint.zero
                    var size = CGSize.zero

                    if let delegate = delegate {
                        size = delegate.collectionView(collectionView, layout: self, sizeForItemAt: indexPath)

                        origin.x = collectionView.bounds.width / 2 - size.width / 2 //X origin places cell in the horizontal center of the collection view.
                        
                        switch state {
                        case .normal:
                            origin.y = 0
                        case .editingFeedback:
                            origin.y = 0
                        case .hidden:
                            origin.y = collectionView.bounds.height - 1//Position cells at bottom if they should be hidden. 1 is used because we dont want to completely hide the cell, otherwise it will be nil when trying to retreive it from the collection view.
                        }
                    }
                    
                    attributes.frame = CGRect(origin: origin, size: size)
                    cache?.append(attributes)
                    
                    contentHeight += size.height //Makes the content height larger by whatever the item height is. All of the items will make up the final height.
                }
            }
        }
    }
    
    override var collectionViewContentSize: CGSize {
        return CGSize(width: contentWidth, height: contentHeight)
    }
    
    override func layoutAttributesForElements(in rect: CGRect) -> [UICollectionViewLayoutAttributes]? {
        return cache
    }
    
    override func layoutAttributesForItem(at indexPath: IndexPath) -> UICollectionViewLayoutAttributes? {
        return cache?[indexPath.row] //Required for layout animation to function.
    }
    
    /// Resets the cache and invalidates the layout.
    func reset() {
        cache = nil
        invalidateLayout()
    }
}
