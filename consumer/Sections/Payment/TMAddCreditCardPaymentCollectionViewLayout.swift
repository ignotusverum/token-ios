//
//  TMPaymentCollectionViewLayout.swift
//  consumer
//
//  Created by Gregory Sapienza on 3/10/17.
//  Copyright Â© 2017 Human Ventures Co. All rights reserved.
//

import UIKit

class TMAddCreditCardPaymentCollectionViewLayout: UICollectionViewLayout {
    
    /// Layout cache for attributes generated by this layout. Cache is needed so that attributes do not have to be regenerated every time that the 'prepare' function is called.
    var cache: [UICollectionViewLayoutAttributes]?
    
    private var contentWidth: CGFloat {
        if let collectionView = collectionView {
            return collectionView.bounds.width //Content width will not grow, so using the collection view width will be fine.
        } else {
             return 0
        }
    }
    
    private var contentHeight: CGFloat = 0
    
    override func prepare() {
        if cache == nil {
            cache = []
            
            let horizontalOffset: CGFloat = contentWidth / 9.35 //Offset on the the left and right side of the cells.
            
            guard let collectionView = collectionView else {
                print("Collection View is nil")
                return
            }
            
            let sectionHeight: CGFloat = collectionView.bounds.height / 7 //Height for each section of cells.
            
            for section in 0 ..< collectionView.numberOfSections {
                let sectionWidth = contentWidth - (horizontalOffset * 2) //Section width takes the horizontal offset into account.
                
                for item in 0 ..< collectionView.numberOfItems(inSection: section) {
                    let itemWidth: CGFloat = sectionWidth / CGFloat(collectionView.numberOfItems(inSection: section)) //Width for each cell is determined by the section width and divides that by how many items the section contains. Items are layed out horizontally.
                    
                    let itemFrame = CGRect(x: (CGFloat(item) * itemWidth) + horizontalOffset, y: sectionHeight * CGFloat(section), width: itemWidth, height: sectionHeight) //Determines item frame within each section.
                    
                    let indexPath = IndexPath(item: item, section: section)
                    let attributes = UICollectionViewLayoutAttributes(forCellWith: indexPath)
                    attributes.frame = itemFrame
                    cache?.append(attributes)
                }
                
                contentHeight += sectionHeight //Makes the content height larger by whatever the section height is. All of the sections will make up the final height.
            }
        }
    }
    
    override var collectionViewContentSize: CGSize {
        return CGSize(width: contentWidth, height: contentHeight)
    }
    
    override func layoutAttributesForElements(in rect: CGRect) -> [UICollectionViewLayoutAttributes]? {
        var layoutAttributes: [UICollectionViewLayoutAttributes] = []
        
        guard let cache = cache else {
            print("Cache is nil")
            return nil
        }
        
        //Gets attributes for rect.
        
        for attributes in cache {
            if rect.intersects(attributes.frame) {
                layoutAttributes.append(attributes)
            }
        }
        
        return layoutAttributes
    }
}
